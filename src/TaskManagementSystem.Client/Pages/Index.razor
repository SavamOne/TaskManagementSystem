@page "/"
@using System.Text.Json

<CreateCalendarModal @ref="createCalendarModal" OnSuccess="tabs.RefreshCalendarsStateAsync"/>

<h3 class="fw-bold">Выделенные календари</h3>
<div class="row row-cols-1 row-cols-md-4 g-4">
    <div class="col p-4">
        <NavLink href="events" class="card text-white bg-danger mb-3 h-100 text-decoration-none">
            <div class="card-header">
                <h5 class="card-title mt-2 mb-2">Cобытия c моим участием</h5>
            </div>
            <div class="card-body">
                <p class="card-text">Выделенный календарь с событиями, где вы являетесь участником, со всех календарей.</p>
            </div>
        </NavLink>
    </div>
</div>

<div class="d-flex flex-row align-items-baseline">
    <h3 class="fw-bold">Участие в календарях</h3>
    <div class="cursor-pointer mx-2 oi oi-plus" @onclick="Create"></div>
</div>

<CalendarTabsComponent @ref="tabs"/>

@code
{
    [Inject]
    public IJSInteropWrapper? JsInteropWrapper { get; set; }

    [Inject]
    public ServerProxy? ServerProxy { get; set; }

    [Inject]
    public IToastService? ToastService { get; set; }

    private CreateCalendarModal createCalendarModal = new();

    private CalendarTabsComponent tabs = new();

    private void Create()
    {
        createCalendarModal.Create();
    }


    protected override void OnInitialized()
    {
        _ = RequestNotificationSubscriptionAsync();
    }

    private async Task RequestNotificationSubscriptionAsync()
    {
        try
        {
            if (!await JsInteropWrapper!.NeedToSubscribeAsync())
            {
                return;
            }

            var publicKeyResult = await ServerProxy!.GetNotificationsPublicKey();
            if (!publicKeyResult.IsSuccess)
            {
                ToastService!.AddSystemErrorToast(publicKeyResult.ErrorDescription!);
                return;
            }

            AddNotificationSubscribeRequest? subscriptionRequest = await JsInteropWrapper!.TryRequestNotificationSubscriptionAsync(publicKeyResult.Value!.PublicKey);
            Console.WriteLine(JsonSerializer.Serialize(subscriptionRequest));

            if (subscriptionRequest == null)
            {
                return;
            }

            var result = await ServerProxy!.SubscribeToNotifications(subscriptionRequest);

            if (!result.IsSuccess)
            {
                ToastService!.AddSystemErrorToast(result.ErrorDescription!);
            }
        }
        catch (Exception e)
        {
            ToastService!.AddSystemErrorToast(e.Message);
        }
    }
}