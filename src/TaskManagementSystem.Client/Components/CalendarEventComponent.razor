<EventEditFormModal @ref="EditEventModal" OnEventChanged="async () => { await FillDays(); StateHasChanged(); }"/>

<!--TODO: HACK -->
@if (this is CalendarEventComponentWithCalendarEventEvents)
{
    <CalendarInfoModal @ref="CalendarInfoModal" CalendarId="CalendarId" CalendarNameChanged="name => {EventInfoViewModel.AddCalendarName(CalendarId, name); CalendarName = name; StateHasChanged();}" />
}

<!-- Calendar -->
<div class="calendar">
    <div class="w-100 d-flex flex-row align-items-center justify-content-between">
        <div class="d-flex flex-row">
            <button class="btn btn-outline-primary navbar-margin" @onclick="RemoveMonth">
                <span class="oi oi-arrow-left"></span>
            </button>
            <button class="btn btn-outline-primary navbar-margin" @onclick="AppendMonth">
                <span class="oi oi-arrow-right"></span>
            </button>
            <!--TODO: HACK -->
            @if (this is CalendarEventComponentWithCalendarEventEvents)
            {
                <button class="btn btn-outline-success navbar-margin" @onclick="() => EditEventModal.Create(CalendarId)">
                    <span class="oi oi-plus"></span>
                </button>
                <button class="btn btn-outline-warning navbar-margin" @onclick="() => CalendarInfoModal.Show()">
                    <span class="oi oi-info"></span>
                    @* О календаре *@
                </button>
            }
        </div>
        <div class="d-flex flex-row">
            @if (IsLoaded)
            {
                <h2 class="month fw-bold mb-0 text-capitalize">@Month @Year</h2>
            }
        </div>
        <div>
            <h2 class="mb-0">@CalendarName</h2>
        </div>
    </div>


    @if (IsLoaded)
    {
        <div class="day-names">
            @foreach (DayOfWeekViewModel dayOfWeekViewModel in DayOfWeekNamesWithFirstDay!)
            {
                <div class="value day-name">@dayOfWeekViewModel</div>
            }
        </div>
        <div class="days">
            @foreach (DayViewModel dayNum in Days)
            {
                <div class="day-num @(dayNum.IsWeekEndDay ? "weekend" : string.Empty)">
                    <div class="day-container">
                        <div class="value @(dayNum.IsHidden ? "outside" : dayNum.IsTodayDay ? "fw-bold text-danger" : string.Empty)">@dayNum.Day</div>
                        @foreach (EventInfoViewModel ev in dayNum.Events)
                        {
                            <div class="event all-day end cursor-pointer"
                                 style="background:@ev.Color;opacity:@ev.Opacity"
                                 @onclick="async () => await EditEventModal.EditAsync(ev.Data)">
                                <span class="oi @(ev.Icon)" style="margin-left: 5px"></span>
                                @ev.Name
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <LoaderComponent/>
    }
</div>