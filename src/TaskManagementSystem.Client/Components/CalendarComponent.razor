<EventEditFormModal @ref="EditEventModal" CalendarId="CalendarId" OnEventChanged="async () => { await DateRangeViewModel!.GetEventsAsync(); StateHasChanged(); }"/>

<!-- Calendar -->
<div class="calendar">
    <div class="d-flex position-fixed">
        <button class="btn btn-outline-success m-lg-1" @onclick="EditEventModal.Create">
            <span class="oi oi-plus"></span>
        </button>
        <button class="btn btn-outline-primary m-lg-1" @onclick="RemoveMonth">
            <span class="oi oi-arrow-left"></span>
        </button>
        <button class="btn btn-outline-primary m-lg-1" @onclick="AppendMonth">
            <span class="oi oi-arrow-right"></span>
        </button>
        <NavLink href="@(Path.Combine("calendar", CalendarId.ToString()))" class="btn btn-outline-primary text-decoration-none m-lg-1">О календаре</NavLink>
    </div>
    <div class="d-flex justify-content-center w-100">
        @if (IsLoaded)
        {
            <h2 class="month font-weight-bold mb-0 text-capitalize">@Month @Year</h2>
        }
    </div>

    @if (IsLoaded)
    {
        <div class="day-names">
            @foreach (var dayOfWeekViewModel in DayOfWeekNamesWithFirstDay!)
            {
                <div class="value day-name">@dayOfWeekViewModel</div>
            }
        </div>
        <div class="days">
            @foreach (DayViewModel dayNum in DateRangeViewModel!.Days)
            {
                <div class="day-num @(dayNum.IsWeekEndDay ? "weekend" : string.Empty)">
                    <div class="day-container">
                        <div class="value @(dayNum.IsHidden ? "outside" : dayNum.IsTodayDay ? "fw-bold text-danger" : string.Empty)">@dayNum.Day</div>
                        @foreach (EventInfo ev in dayNum.Events)
                        {
                            <div class="event all-day end bg-success cursor-pointer" @onclick="async () => await EditEventModal.EditAsync(ev)">@ev.Name</div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <LoaderComponent/>
    }
</div>