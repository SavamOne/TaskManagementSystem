<EditFormModal @ref="Modal" Item="Event" SubmitAsync="async _ => await SubmitAsync()">
<Body>
<div class="row">
    <div class="col-sm-6">
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                <span class="oi oi-calendar"></span>
            </span>
            <InputText @bind-Value="Event.Name" type="text" class="form-control" placeholder="Название события" disabled="@(!CanUserChangeEvent)"/>
        </div>
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                <span class="oi oi-copywriting"></span>
            </span>
            <InputTextArea @bind-Value="Event.Description" type="text" class="form-control" placeholder="Описание события" disabled="@(!CanUserChangeEvent)"/>
        </div>
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center"></span>
            <DropdownComponent Items="eventTypes" SelectedItem="Event.EventType"
                               Disabled="@(!CanUserChangeEvent)"
                               ItemToStringFunc="CalendarEventTypeExtensions.GetDescription"
                               ItemSelectedFunc="type => { Event.EventType = type; Console.WriteLine(Event.EventType); StateHasChanged();}"/>
        </div>
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                <span class="oi oi-map-marker"></span>
            </span>
            <InputText @bind-Value="Event.Place" type="text" class="form-control" placeholder="Место" disabled="@(!CanUserChangeEvent)"/>
        </div>
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                <span class="oi oi-lock-locked"></span>
            </span>
            <label>
                <InputCheckbox @bind-Value="Event.IsPrivate" disabled="@(!CanUserChangeEvent)"/> Приватное событие
            </label>
        </div>
        @if (isRepeated)
        {
            <div class="d-flex flex-row align-items-baseline">
                <span style="min-width: 35px" class="d-flex justify-content-center">
                    <span class="oi oi-clock"></span>
                </span>
                <h6>Выборанный повтор:</h6>
            </div>
            <div class="d-flex flex-row align-items-baseline mb-2">
                <span style="min-width: 35px" class="d-flex justify-content-center"></span>
                <span class="w-100 d-flex flex-row align-items-baseline">
                    <input value="@repeatedStartDateStr" type="datetime-local" class="form-control" readonly/>
                    <p class="m-lg-1">-</p>
                    <input value="@repeatedEndDateStr" type="datetime-local" class="form-control" readonly/>
                </span>
            </div>
            <div class="d-flex flex-row align-items-baseline">
                <span style="min-width: 35px" class="d-flex justify-content-center"></span>
                <h6>Первоначальная настройка:</h6>
            </div>
        }
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                @if (!isRepeated)
                {
                    <span class="oi oi-clock"></span>
                }
            </span>
            <span class="w-100 d-flex flex-row align-items-baseline">
                <InputText @bind-Value="Event.StartDateStr" type="datetime-local" class="form-control" placeholder="Начало" disabled="@(!CanUserChangeEvent)"/>
                <p class="m-lg-1">-</p>
                <InputText @bind-Value="Event.EndDateStr" type="datetime-local" class="form-control" placeholder="Окончание" disabled="@(!CanUserChangeEvent)"/>
            </span>
        </div>
        @if (notifyRepeatChanged)
        {
            <div class="d-flex flex-row align-items-baseline mb-2 text-danger">
                <span style="wmin-idth: 60px" class="d-flex justify-content-center">
                    <span class="oi oi-warning"></span>
                </span>
                <h6>Отображается дата исходного события. Для просмотра конкретного повтора закройте это окно и выберите событие.</h6>
            </div>
        }
        <div class="d-flex flex-row align-items-baseline mb-2">
            <span style="min-width: 35px" class="d-flex justify-content-center">
                <span class="oi oi-reload"></span>
            </span>
            <DropdownComponent Items="repeatTypes" SelectedItem="Event.RepeatType"
                               Disabled="@(!CanUserChangeEvent)"
                               ItemToStringFunc="EventRepeatTypeExtensions.GetDescription"
                               ItemSelectedFunc="type => { Event.RepeatType = type; Console.WriteLine(Event.RepeatType); StateHasChanged();}"/>
        </div>
        @if (Event.RepeatType is EventRepeatType.OnWeekDays)
        {
            @foreach (DayOfWeekViewModel dayOfWeek in dayOfWeeks!)
            {
                <div class="d-flex flex-row align-items-baseline mb-1">
                    <span style="min-width: 35px" class="d-flex justify-content-center"></span>
                    <div class="form-check" @onclick="() => Event.CheckDayOfWeek(dayOfWeek.Value)">
                        <input class="form-check-input" type="checkbox" value="" checked="@(Event.DayOfWeeks.Contains(dayOfWeek.Value))" disabled="@(!CanUserChangeEvent)">
                        <label class="form-check-label">@dayOfWeek</label>
                    </div>
                </div>
            }
        }
        @if (participationState.HasValue)
        {
            <div class="mb-2 d-flex flex-row align-items-baseline mb-2">
                <span style="min-width: 35px" class="d-flex justify-content-center">
                    <span class="oi oi-briefcase m-lg-1"></span>
                </span>
                <DropdownComponent Items="participationStates"
                                   SelectedItem="participationState.Value"
                                   ItemToStringFunc="EventParticipantStateExtensions.GetDescription"
                                   ItemSelectedFunc="state => { participationState = state; participationStateChanged = true; StateHasChanged();}"/>
                <h6 class="text-nowrap ms-2">Напомнить за:</h6>
                <input id="notifyMinutesInput" type="number" 
                       class="form-control ms-2" min="0" max="@(7 * 24 * 60)" 
                       value="@(notifyMinutes?.TotalMinutes ?? 0)" 
                       @onchange="() => participationStateChanged = true"
                       disabled="@(participationState.Value is EventParticipantState.Rejected)">
                <h6 class="ms-2">минут</h6>
                <button class="btn btn-primary ms-2" type="submit" @onclick="SetParticipationState" disabled="@(!participationStateChanged)">ОК</button>
            </div>
        }
    </div>
    <div class="col-sm-6">
        <div class="row mb-1">
            <div class="col col-sm-10">
                <input type="text" class="form-control" @bind="filter" disabled="@(!CanUserChangeParticipants)">
            </div>
            <div class="col col-sm-2">
                <button type="button" class="btn btn-outline-primary w-100" @onclick="FilterParticipantsAsync" disabled="@(!CanUserChangeParticipants)">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
            </div>
        </div>

        @foreach (UserInfoWithEventRoleViewModel user in possibleParticipants)
        {
            <div class="row mb-1">
                <div class="col col-sm-5">
                    <div class="d-flex flex-row align-items-center">
                        <span style="width: 25px"></span>
                        <ProfilePicComponent Username="@user.Name" Size="40"/>
                        <p class="h-100 m-lg-2">@user.Name</p>
                    </div>
                </div>
                <div class="col col-sm-3">
                    <p class="h-100 d-flex align-items-center">@user.Email</p>
                </div>
                <div class="col col-sm-4">
                    <div class="h-100 d-flex align-items-center">
                        <DropdownComponent Items="roles" SelectedItem="user.Role"
                                           Disabled="!CanUserChangeParticipants"
                                           ItemToStringFunc="EventParticipantRoleExtensions.GetDescription"
                                           ItemSelectedFunc="role => { user.Role = role; ParticipantsChanged = true; }"/>
                    </div>
                </div>
            </div>
        }

        @foreach (EventParticipantViewModel participant in participants)
        {
            <div class="row mb-1">
                <div class="col col-sm-5">
                    <div class="d-flex flex-row align-items-center">
                        <span style="width: 25px">
                            <span class="m-lg-1 oi @participant.State.GetIcon()"></span>
                        </span>
                        <ProfilePicComponent Username="@participant.Name" Size="40"/>
                        <p class="h-100 m-lg-2">@participant.Name</p>
                    </div>
                </div>
                <div class="col col-sm-3">
                    <p class="h-100 d-flex align-items-center">@participant.Email</p>
                </div>
                <div class="col col-sm-4">
                    <div class="h-100 d-flex align-items-center">
                        <DropdownComponent Items="roles" SelectedItem="participant.Role"
                                           Disabled="!CanUserChangeParticipants || participant.Role == EventParticipantRole.Creator"
                                           ItemToStringFunc="EventParticipantRoleExtensions.GetDescription"
                                           ItemSelectedFunc="role => {participant.Role = role; ParticipantsChanged = true; }"/>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
</Body>
<Footer>
    <button class="btn btn-outline-danger" type="button" @onclick="DeleteEventAsync" disabled="@(!CanUserDeleteEvent)">Удалить событие</button>
    <button class="btn btn-primary" type="submit" disabled="@(!Event.Changed && !ParticipantsChanged)">Сохранить</button>
</Footer>
</EditFormModal>