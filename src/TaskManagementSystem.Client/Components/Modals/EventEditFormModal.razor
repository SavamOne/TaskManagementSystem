<EditFormModal @ref="Modal" Item="Event" Submit="x => Submit(x)" Title="@LocalizedResources.EventEditFormModal_EventEditing">
    <Body>
    <div class="row">
        <div class="col-sm-6">
            <div class="d-flex flex-row align-items-baseline">
                <span style="width: 35px">
                    <span class="oi oi-calendar m-lg-1"></span>
                </span>

                <InputText @bind-Value="Event.Name" type="text" class="mb-2 form-control" placeholder="Название события"/>
            </div>
            <div class="d-flex flex-row align-items-baseline">
                <span style="width: 35px">
                    <span class="oi oi-copywriting m-lg-1"></span>
                </span>
                <InputText @bind-Value="Event.Description" type="text" class="mb-2 form-control" placeholder="Описание события"/>
            </div>


            <div class="d-flex flex-row align-items-baseline">
                <span style="width: 35px">
                    <span class="oi oi-map-marker m-lg-1"></span>
                </span>
                <InputText @bind-Value="Event.Place" type="text" class="mb-2 form-control" placeholder="Место"/>
            </div>

            <div class="d-flex flex-row align-items-baseline">
                <span style="width: 35px">
                    <span class="oi oi-clock m-lg-1"></span>
                </span>
                <span class="w-100 d-flex flex-row align-items-baseline">
                    <InputText @bind-Value="Event.StartDateStr" type="datetime-local" class="mb-2 form-control" placeholder="Начало"/>
                    <p class="m-lg-1">-</p>
                    <InputText @bind-Value="Event.EndDateStr" type="datetime-local" class="mb-2 form-control" placeholder="Окончание"/>
                </span>

            </div>
        </div>
        <div class="col-sm-6">
            @*<div class="row">
                <div class="d-flex flex-row align-items-baseline">
                    <span class="oi oi-people"></span>
                    <p>Участники</p>
                </div>
            </div>*@
            <div class="row">
                <div class="col col-sm-10">
                    <input type="text" class="form-control" @bind="filter">
                </div>
                <div class="col col-sm-2">
                    <button type="button" class="btn btn-outline-primary w-100" @onclick="FilterParticipants">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>

            @foreach (EventParticipantUser participant in Participants)
            {
                <div class="row mb-1">
                    <div class="col col-sm-3">
                        <p class="h-100 d-flex align-items-center">@participant.UserName</p>
                    </div>
                    <div class="col col-sm-3">
                        <p class="h-100 d-flex align-items-center">@participant.UserEmail</p>
                    </div>
                    <div class="col col-sm-6">
                        <div class="h-100 d-flex align-items-center">
                            <DropdownComponent Items="roles" SelectedItem="participant.Role"
                                               ItemToStringFunc="EventParticipantRoleExtensions.GetDescription"
                                               ItemSelectedFunc="role => {}"/>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>


    </Body>
</EditFormModal>

@code {

    [Inject]
    public ServerProxy? ServerProxy { get; set; }

    [Inject]
    public IToastService? ToastService { get; set; }

    private EditFormModal<EventViewModel> Modal { get; set; } = new();

    private string? filter = string.Empty;

    private EventViewModel Event { get; set; } = new();

    private IEnumerable<EventParticipantUser> Participants { get; set; } = Enumerable.Empty<EventParticipantUser>();

    private IEnumerable<EventParticipantRole> roles = Enum.GetValues<EventParticipantRole>();

    public async Task EditAsync(Guid eventId)
    {
        var result = await ServerProxy!.GetEventInfo(new GetEventInfoRequest(eventId));

        if (!result.IsSuccess)
        {
            ToastService!.AddSystemErrorToast(result.ErrorDescription!);
            return;
        }

        Event = new(result.Value!.EventInfo);
        Participants = result.Value!.Participants.ToList();

        Modal.Open();
    }

    public async Task CreateNew()
    {
        Event = new EventViewModel();
        Participants = Enumerable.Empty<EventParticipantUser>();

        Modal.Open();
    }

    public void Submit(EventViewModel eventViewModel)
    {
        Console.WriteLine(eventViewModel.ToString());
    }
    
    
    private void FilterParticipants()
    {
        // ServerProxy
    }
}